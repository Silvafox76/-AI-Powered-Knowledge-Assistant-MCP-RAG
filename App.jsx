import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button.jsx'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx'
import { Input } from '@/components/ui/input.jsx'
import { Textarea } from '@/components/ui/textarea.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx'
import { ScrollArea } from '@/components/ui/scroll-area.jsx'
import { Separator } from '@/components/ui/separator.jsx'
import { Alert, AlertDescription } from '@/components/ui/alert.jsx'
import { 
  Brain, 
  Search, 
  Upload, 
  MessageSquare, 
  Users, 
  Settings, 
  FileText, 
  Database,
  Zap,
  BookOpen,
  TrendingUp,
  Shield,
  Clock,
  CheckCircle,
  AlertCircle,
  Loader2
} from 'lucide-react'
import './App.css'

function App() {
  const [activeTab, setActiveTab] = useState('query')
  const [queryMode, setQueryMode] = useState('rag')
  const [selectedAgent, setSelectedAgent] = useState('')
  const [query, setQuery] = useState('')
  const [response, setResponse] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [agents, setAgents] = useState([])
  const [stats, setStats] = useState(null)
  const [uploadFile, setUploadFile] = useState(null)
  const [authToken, setAuthToken] = useState('demo_token') // For demo purposes

  // Mock data for demonstration
  const mockAgents = [
    { name: 'prince2', display_name: 'PRINCE2', description: 'PRINCE2 project management specialist' },
    { name: 'agile', display_name: 'Agile', description: 'Agile and Scrum methodology expert' },
    { name: 'itil', display_name: 'ITIL', description: 'ITIL service management specialist' },
    { name: 'ai_strategy', display_name: 'AI Strategy', description: 'AI strategy and digital transformation expert' },
    { name: 'pmbok', display_name: 'PMBOK', description: 'Traditional project management (PMBOK) specialist' },
    { name: 'general_pm', display_name: 'General PM', description: 'General project management advisor' }
  ]

  const mockStats = {
    total_chunks: 1247,
    unique_sources: 89,
    content_types: {
      'application/pdf': 45,
      'text/plain': 32,
      'application/vnd.openxmlformats-officedocument.presentationml.presentation': 12
    }
  }

  useEffect(() => {
    setAgents(mockAgents)
    setStats(mockStats)
  }, [])

  const handleQuery = async () => {
    if (!query.trim()) return

    setIsLoading(true)
    setResponse('')

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      if (queryMode === 'rag') {
        setResponse(`**RAG Response:**

Based on the knowledge base, here's what I found regarding "${query}":

This is a comprehensive response that would be generated by the RAG system, drawing from your extensive collection of project management documents, certifications, and frameworks.

**Key Points:**
• Relevant information from PRINCE2 documentation
• Best practices from PMBOK guidelines  
• Lessons learned from previous projects
• Industry standards and frameworks

**Sources:**
• PRINCE2 Managing Successful Projects (Chapter 3)
• PMBOK Guide 7th Edition (Section 2.4)
• Internal Project Lessons Learned Database`)
      } else {
        const agentName = selectedAgent || 'general_pm'
        const agentDisplay = agents.find(a => a.name === agentName)?.display_name || 'General PM'
        
        setResponse(`**${agentDisplay} Agent Response:**

As a ${agentDisplay} specialist, I can provide expert guidance on "${query}":

This response demonstrates the multi-agent approach where specialized agents provide domain-specific expertise. Each agent has deep knowledge in their respective areas and can provide targeted, actionable advice.

**Specialized Insights:**
• Domain-specific best practices
• Methodology-specific guidance
• Expert recommendations
• Implementation strategies

**Agent Collaboration:**
When needed, multiple agents can collaborate to provide comprehensive cross-methodology perspectives.`)
      }
    } catch (error) {
      setResponse('Error: Unable to process query. Please check your connection and try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleFileUpload = async () => {
    if (!uploadFile) return

    setIsLoading(true)
    try {
      // Simulate file upload
      await new Promise(resolve => setTimeout(resolve, 1500))
      alert(`File "${uploadFile.name}" uploaded successfully!`)
      setUploadFile(null)
    } catch (error) {
      alert('Upload failed. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      {/* Header */}
      <header className="border-b bg-white/80 backdrop-blur-sm dark:bg-slate-900/80 sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg">
                <Brain className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  AI Knowledge Assistant
                </h1>
                <p className="text-sm text-muted-foreground">
                  Your expert PM & IT knowledge companion
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                <CheckCircle className="h-3 w-3 mr-1" />
                Online
              </Badge>
              <Button variant="outline" size="sm">
                <Settings className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 lg:w-[600px] mx-auto">
            <TabsTrigger value="query" className="flex items-center space-x-2">
              <MessageSquare className="h-4 w-4" />
              <span>Query</span>
            </TabsTrigger>
            <TabsTrigger value="upload" className="flex items-center space-x-2">
              <Upload className="h-4 w-4" />
              <span>Upload</span>
            </TabsTrigger>
            <TabsTrigger value="agents" className="flex items-center space-x-2">
              <Users className="h-4 w-4" />
              <span>Agents</span>
            </TabsTrigger>
            <TabsTrigger value="dashboard" className="flex items-center space-x-2">
              <TrendingUp className="h-4 w-4" />
              <span>Dashboard</span>
            </TabsTrigger>
          </TabsList>

          {/* Query Tab */}
          <TabsContent value="query" className="space-y-6">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Search className="h-5 w-5" />
                  <span>Ask Your Knowledge Assistant</span>
                </CardTitle>
                <CardDescription>
                  Query your knowledge base using RAG or specialized MCP agents
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex space-x-4">
                  <Select value={queryMode} onValueChange={setQueryMode}>
                    <SelectTrigger className="w-[200px]">
                      <SelectValue placeholder="Select mode" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="rag">
                        <div className="flex items-center space-x-2">
                          <Database className="h-4 w-4" />
                          <span>RAG Mode</span>
                        </div>
                      </SelectItem>
                      <SelectItem value="mcp">
                        <div className="flex items-center space-x-2">
                          <Zap className="h-4 w-4" />
                          <span>MCP Agents</span>
                        </div>
                      </SelectItem>
                    </SelectContent>
                  </Select>

                  {queryMode === 'mcp' && (
                    <Select value={selectedAgent} onValueChange={setSelectedAgent}>
                      <SelectTrigger className="w-[200px]">
                        <SelectValue placeholder="Select agent" />
                      </SelectTrigger>
                      <SelectContent>
                        {agents.map((agent) => (
                          <SelectItem key={agent.name} value={agent.name}>
                            {agent.display_name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  )}
                </div>

                <Textarea
                  placeholder="Ask about project management, PRINCE2, Agile, ITIL, or any topic in your knowledge base..."
                  value={query}
                  onChange={(e) => setQuery(e.target.value)}
                  className="min-h-[100px]"
                />

                <Button 
                  onClick={handleQuery} 
                  disabled={isLoading || !query.trim()}
                  className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    <>
                      <Search className="h-4 w-4 mr-2" />
                      Ask Assistant
                    </>
                  )}
                </Button>

                {response && (
                  <Card className="mt-6 border-l-4 border-l-blue-500">
                    <CardHeader>
                      <CardTitle className="text-lg">Response</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ScrollArea className="h-[400px]">
                        <div className="prose prose-sm max-w-none dark:prose-invert">
                          {response.split('\n').map((line, index) => (
                            <p key={index} className="mb-2">
                              {line}
                            </p>
                          ))}
                        </div>
                      </ScrollArea>
                    </CardContent>
                  </Card>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Upload Tab */}
          <TabsContent value="upload" className="space-y-6">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Upload className="h-5 w-5" />
                  <span>Upload Documents</span>
                </CardTitle>
                <CardDescription>
                  Add new documents to your knowledge base
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  <Upload className="h-12 w-12 mx-auto text-gray-400 mb-4" />
                  <div className="space-y-2">
                    <p className="text-lg font-medium">Drop files here or click to browse</p>
                    <p className="text-sm text-muted-foreground">
                      Supports PDF, DOCX, PPTX, TXT, CSV, and MD files
                    </p>
                  </div>
                  <Input
                    type="file"
                    onChange={(e) => setUploadFile(e.target.files[0])}
                    className="mt-4"
                    accept=".pdf,.docx,.pptx,.txt,.csv,.md"
                  />
                </div>

                {uploadFile && (
                  <Alert>
                    <FileText className="h-4 w-4" />
                    <AlertDescription>
                      Ready to upload: {uploadFile.name} ({(uploadFile.size / 1024 / 1024).toFixed(2)} MB)
                    </AlertDescription>
                  </Alert>
                )}

                <Button 
                  onClick={handleFileUpload} 
                  disabled={!uploadFile || isLoading}
                  className="w-full"
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Uploading...
                    </>
                  ) : (
                    <>
                      <Upload className="h-4 w-4 mr-2" />
                      Upload to Knowledge Base
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Agents Tab */}
          <TabsContent value="agents" className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {agents.map((agent) => (
                <Card key={agent.name} className="shadow-lg hover:shadow-xl transition-shadow">
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg">
                        <Brain className="h-4 w-4 text-white" />
                      </div>
                      <span>{agent.display_name}</span>
                    </CardTitle>
                    <CardDescription>{agent.description}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <Badge variant="secondary">
                        <CheckCircle className="h-3 w-3 mr-1" />
                        Active
                      </Badge>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => {
                          setQueryMode('mcp')
                          setSelectedAgent(agent.name)
                          setActiveTab('query')
                        }}
                      >
                        Use Agent
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Dashboard Tab */}
          <TabsContent value="dashboard" className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
              <Card className="shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Documents</CardTitle>
                  <FileText className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats?.unique_sources || 0}</div>
                  <p className="text-xs text-muted-foreground">
                    Across multiple formats
                  </p>
                </CardContent>
              </Card>

              <Card className="shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Knowledge Chunks</CardTitle>
                  <Database className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats?.total_chunks || 0}</div>
                  <p className="text-xs text-muted-foreground">
                    Searchable segments
                  </p>
                </CardContent>
              </Card>

              <Card className="shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Active Agents</CardTitle>
                  <Users className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{agents.length}</div>
                  <p className="text-xs text-muted-foreground">
                    Specialized experts
                  </p>
                </CardContent>
              </Card>

              <Card className="shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">System Status</CardTitle>
                  <Shield className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-600">Healthy</div>
                  <p className="text-xs text-muted-foreground">
                    All systems operational
                  </p>
                </CardContent>
              </Card>
            </div>

            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle>Content Distribution</CardTitle>
                <CardDescription>
                  Breakdown of document types in your knowledge base
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {stats?.content_types && Object.entries(stats.content_types).map(([type, count]) => (
                    <div key={type} className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <FileText className="h-4 w-4" />
                        <span className="text-sm">
                          {type === 'application/pdf' ? 'PDF Documents' :
                           type === 'text/plain' ? 'Text Files' :
                           type === 'application/vnd.openxmlformats-officedocument.presentationml.presentation' ? 'PowerPoint Files' :
                           type}
                        </span>
                      </div>
                      <Badge variant="secondary">{count}</Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}

export default App

